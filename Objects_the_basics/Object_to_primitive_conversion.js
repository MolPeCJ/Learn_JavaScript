// Преобразование объектов в примитивы

// Хинты
// Как JS решает, какое преобразование применить?
// Существует три варианта преобразования типов, которые происходят в различных ситуациях.
// Они называются "хинтами", как описано в спецификации:

// "string"
// Для преобразования объекта к строке, когда мы выполняем операцию над объектом, которая
// ожидает строку, например alert или сonsole.log.
// Также когда используем объект в качестве имени свойства другого объекта
anotherObj[obj] = 123;

// "number"
// Для преобразования объекта к числу, в случае математических операций: 
// явное преобразование
let num = Number(obj);
// математическое (не считая бинарного плюса)
let n = +obj; // унарный плюс
let delta = date1 - date2;
// сравнения больше/меньше
let greater = user1 > user2;

// "default"
// Происходит редко, когда оператор "не уверен", какой тип ожидать.
// Например, бинарный плюс + может работать как со строками (объдиняя их в одну), так и с
// числами (складывая их). Поэтому, если бинарный плюс получает объект в качестве аргумента, он
// использует хинт "default" для его преобразования.
// Также, если объект сравнивается с помощью == со строкой, числом или символом, тоже неясно, 
// какое преобразование следует выполнить, поэтому используется хинт "default"
let total = obj1 + obj2; // бинарный плюс использует хинт "default"
if (user == 1) {}; // obj == number использует хинт "default"

// Все встроенные объекты, за исключением одного (объект Date, который мы рассмотрим позже),
// реализуют "default" преобразование тем же способом, что и "number". 
// И на следует поступать так же

// Symbol.toPrimitive
// Начнем с первого метода. Есть встроенный символ с именем Symbol.toPrimitive,
// который следует использовать для обозначения метода преобразования, вот так:
obj[Symbol.toPrimitive] = function(hint) {
    // вот код преобразования этого объекта в примитив
    // он должен вернуть примитивное значение
    // hint = чему-то из "string", "number", "default"
};
// Если метод Symbol.toPrimitive существует, он используется для всех хинтов, и больше никаких
// методов не требуется.
// Например, здесь объект user реализует его:
let user = {
    name: "Jhon",
    money: 1000,

    [Symbol.toPrimitive](hint) {
        console.log( `hint: ${hint}` );
        return hint == "string" ? `{name: ${this.name}}` : this.money;
    }
};

console.log(user);