// Конструкторы, создание объектов через "new"

// Обычный синтаксис {...} позволяет создать только один объект. Но зачастую нам нужно создать
// множество однотипных объектов, таких как пользователи, элементы меню и т.д.
// Это можно сделать при помощи функции-конструктора и оператора "new"

// Функция-конструктор

// Функции-конструкторы являются обычными функциями. Но есть два соглашения: 
// 1. Имя функции конструктора должно начинаться с большой буквы
// 2. Функция-конструктор должна вызываться при помощи оператора "new"
function User(name) {
    this.name = name;
    this.isAdmin = false;
}

let user = new User("Vasya");

console.log(user.name); // Vasya
console.log(user.isAdmin); // false
// Когда функция вызывается как new User(...), происходит следующее:
// 1. Создается новый пустой объект, и он присваивается this.
// 2. Выполняется код функции. Обычно он модифицирует this, добавляет туда новые свойства.
// 3. Возвращается значение this
// То есть, результат вызова функции это тот же объект, что и:
let user1 = {
    name: "Vasya",
    isAdmin = false
};

// Теперь, когда нам необходимо будет создать других пользователей, мы можем использовать
// new User("Masha"), new User("Dasha") и т.д. Данная конструкция гораздо удобнее и читабельнее, 
// чем каждый раз создавать литерал объекта. Это и является основной целью конструкторов - удобное
// повторное создание однотипных объектов.
// Еще раз заметим: технически любая функция может быть использована как конструктор. То есть,
// каждая функция может быть вызвана при помощи оператора new, и выполнится алгоритм, 
// указанный выше в примере. Заглавная буква в названии функции является всеобщим соглашением
// по именованию, она как бы подсказывается разработчику, что данная функция является
// функцией-конструктором, и ее нужно вызывать через new.

// new function() {...}
// Если в нашем коде большое количество строк, создающих один сложный объект, мы можем
// обернуть их в функцию-конструктор следующим образом:
let user2 = new function() {
    this.name = "Vasya";
    this.isAdmin = false;
}