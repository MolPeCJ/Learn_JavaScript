// Случается, что требуется запись в переменную или для передачи в функцию не всего объекта/
// массива целиком, а элемента(ов) в отдельности. 
// Тут на помощь и приходит деструктурирующее присваивание! Это специальный синтаксис, который
// позволяет нам "распаковывать" массивы или объекты в несколько переменных, так как иногда
// они более удобны.

// Деструктуризация массива
console.log(`\n1 Деструктуризация массива\n`);

let arr = ["Ilya", "Kantor", "Example", "Tsar"];

let [firstName, surname, , title] = arr; // пропускаем ненужные элементы через запятую

console.log(firstName); // Ilya
console.log(surname); // Kantor
console.log(title); // Tsar

// Это просто короткий вариант записи:
let firstNameLong = arr[0];
let surnameLong = arr[1];
let titleLong = arr[3];

// Остаточные параметры
console.log(`\n1.1 Остаточные параметры '...'\n`);

// Если мы хотим не просто получить первые значения, но и собрать все остальные, то можем
// добавить еще один параметр, который получает остальные значения, используя оператор
// "остаточные параметры" - троеточие("..."):
let [name1, name2, ...rest] = ["Julius", "Caesar", "Consul", "of the Roman Republic"];

console.log(name1);
console.log(name2);
console.log(rest[0]); // Consul
// Переменная rest является массивом из оставшихся элементов. 
// Вместо rest можно использовать любое другое название переменной.
// Она должна быть на последнем месте в деструктурирующем присваивании

// Значения по умолчанию
console.log(`\n1.2 Значения по умолчанию\n`);

// Если в массиве меньше значений, чем в присваивании, то ошибки не будет. Отсутствующие значения
// считаются неопределенными: 
let [firstName1, surname1] = [];

console.log(firstName1); // undefined

// Если необходимо указать значения по умолчанию, то нужно использовать '=':
let [name3 = 'Guest', surname3 = 'Anonymous'] = ['Julius'];

console.log(name3); // Julius

// Деструктуризация объекта
console.log(`\n2 Деструктуризация объекта\n`);

// У нас есть существующий объект с правой стороны, который мы хотим разделить на переменные.
// Левая торона содержит "шаблон" для соответствующих свойств В простом случае это список
// названий переменных в {...}

let options = {
    title1: "Menu",
    width: 100,
    height: 200
};
  
let {title1, width, height} = options; // но названия переменных должны совпадать со свойствами

console.log(title1, width); // Menu 100

// Если мы хотим присвоить свойство объекта переменной с другим названием, то надо 
// использовать двоеточие: 

let {title1: a, width: b, height: c} = options;

console.log(a, b, c); // Menu 100 200

// Двоеточие показыывает "что: куда идет"! Для потенциально отсутствующих свойств мы можем установить
// значения по умолчанию, используя "=", как здесь: 
let options2 = {
    title2: 'Menu'
};

let {width2 = 100, height2 = 100, title2} = options2;

console.log(width2, title2); // 100, Menu

// Мы также можем совмещать ':' и '=': 
let options3 = {
    title3: 'Menu'
};

let {width3: w3 = 200, title3: t3} = options3;

console.log(w3, t3); // 100 Menu

// Остаток объекта '...'
console.log(`\n2.1 Остаток объекта\n`);

// Если в объекте больше свойств, чем у нас переменных, которые мы объявляем, то оставшиеся
// свойства можно присвоить массиву с использованием '...'

let options4 = {
    title: 'Menu',
    height: 200,
    width: 100
};

let {title: t4, ...rest4} = options4;

console.log(t4, rest4); // Menu { height: 200, width: 100 }

// (!) При этом важно помнить, что если мы объявим переменные не в присваивании let {} = {}, а 
// раньше, то не стоит забывать про дополнительные скобки, так как JS считает это все одним блоком кода

let title5, height5;

({title5, height5} = {title5: 100, height5: 200}); // Дополнительные скобки по бокам!

console.log(title5, height5); // 100 200

// Вложенная деструктуризация
console.log(`\n3 Вложенная деструктуризация\n`);

// Если объект или массив содержит другие вложенные объекты или массивы, то мы можем
// использовать более сложные шаблоны с левой стороны, чтобы извлечь более глубокие свойства.
// В приведенном ниже коде 'options6' хранит другой объект в свойстве 'size6', например, 
// и вот как будет реализована левая часть: 

let options6 = {
    size6: {
      width6: 100,
      height6: 200
    },
    items6: ["Cake", "Donut"],
    extra6: true
};
  
  // деструктуризация разбита на несколько строк для ясности
let {
    size6: { // положим size сюда
      width6,
      height6
    },
    items6: [item1, item2], // добавим элементы к items
    title6 = "Menu" // отсутствует в объекте (используется значение по умолчанию)
} = options6;

console.log(width6, height6, item1, item2, title6); // 100 200 Cake Donut Menu

// Заметим, что size6, items6, extra6 отсутствуют, так как мы или брали глубокие свойства,
// или вовсе не присваивали одно из свойств переменной (extra6)

// Умные параметры функций
console.log(`\n3 Вложенная деструктуризация\n`);